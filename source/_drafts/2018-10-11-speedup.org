# * 你见过Python的GIL吗
#+OPTIONS: toc:nil

GIL是/Global Interpreter Lock/的简称，翻译为中文是/全局解释器锁/，维基百科的解释为：
#+BEGIN_QUOTE
全局解释器锁是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。
#+END_QUOTE
   
** 关于Python多线程与GIL的思考
*** 问题的提出
    学过Python的人大都知道这个解释性语言最通用的实现(CPython)采用了GIL的方式，因此在网上可以看到一些言论说“Python因为有GIL存在，多线程就算了，还是多进程吧”。 \\
    可这并不符合使用Python编程的实际体验，的确会让人产生一些疑惑。 \\
    Python有其自带的多线程模块，而且著名的爬虫框架[[https://github.com/scrapy/scrapy][scrapy]]可以同时爬多个网站，感觉上其并没有受到GIL的限制。 \\
    与Java对比的话，Java也支持多线程也可以写爬虫，而Java并没有GIL，这与Python看起来好像没有什么区别，那么GIL到底有没有发挥作用呢？ \\
    能否使用Java和Python分别写一段语义上一样的代码，通过两段程序的output有着明显的不同来证明GIL的确存在并且起了一定的作用呢？ \\
    要做这个事情首先要进行理论上的更进一步探索，才能进行代码的实现与output的设计。

*** 线程级并发程序的分类
    [[https://book.douban.com/subject/26912767/][<CSAPP>]]上提到了三种不同层面的 *并发编程技术*，分别为：
    1. 进程级别的并发；
    2. I/O多路复用；
    3. 线程级别的并发。
    
    显然此篇的讨论应该归到第三种类型。
    
    接下来，还要明确另一对容易搞错的概念， *并发* 与 *并行* 。
    *并发* 指的是逻辑控制流在时间上的重叠，而 *并行* 则是指对多核CPU的利用。
    并行只是并发的一个真子集，有种说法是“并发是基于逻辑上的同时发生，而并行是基于物理上的同时发生”。
    所以，在只有一个CPU的机器上也可以运行并发程序，却不能运行并行程序。
    
*** 使用加速比证明GIL存在的假设
** 证明过程
