# * 实现并发可以有多少种方式
#+OPTIONS: toc:nil
此篇是比较较真的一篇文章，有点类似于探讨“茴香豆的『回』字有几种写法？”的感觉。 \\

但我确乎感觉到在工作、自我学习过程中，对于 *并发编程* 一直有一些疑惑存在，首先是专有名词比较多，定义什么的没搞清楚，再者是一些表现的现象无法用自己片段的知识来加以解释，无法了解其本质与精髓。 \\
这里列几个自己的疑惑，可能你也为这些问题发愁过。希望可以通过这篇总结，把这块的知识理清一些，在理论上把这一块儿搞透彻。让这些问题不再是问题。 \\

[[https://book.douban.com/subject/26912767/][<CSAPP>]]上提到了三种不同层面的 *并发编程技术*，分别为：
1. 进程级别的并发；
2. I/O多路复用；
3. 线程级别的并发。

接下来，还要明确另一对容易搞错的概念， *并发* 与 *并行* 。
*并发* 指的是逻辑控制流在时间上的重叠，而 *并行* 则是指对多核CPU的利用。
并行只是并发的一个真子集，有种说法是“并发是基于逻辑上的同时发生，而并行是基于物理上的同时发生”。
所以，在只有一个CPU的机器上也可以运行并发程序，却不能运行并行程序。

